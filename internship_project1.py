# -*- coding: utf-8 -*-
"""Internship Project1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HJuId-ezCCOdLrUItpNqZe0IMD0zAe3Q

**Movie Recommendation System**


Recommender system is a system that seeks to predict or filter preferences according to the user's choices. Recommender systems are utilized in a variety of areas including movies,news books,research articles,search queries,social tags,and product in general.Recommender systems produce a list of recommendations in any of the two ways-

**Collaborative filtering:** Colloborative filtering approaches build a model from the user's past behaviour (i.e. Items purchased or searched by the user) as well as similar decisions made by the other users. This model is then used to predict items ( or ratings for items) that users may have an interest in.

**Content-based filtering:** Content-based filtering approaches uses a series of discrete characteristics of an item in order to recommend additional items with similar properties. Content-based filtering methods are totally based on a description of the item and a profile of the user's preferences. It recommends items based on the user's past preferences. Let's develop a basic recommendation system using Python and Pandas.

Let's develop a basic recommendation system by suggesting items that are most similar to a particular item, in this case, movies. It just tells - what movies/items are most similar to the user's movie choice.
"""

import pandas as pd
import numpy as np

df=pd.read_csv(r'https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Movies%20Recommendation.csv')

df.info()

df_features=df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

df_features.shape

df_features

x=df_features['Movie_Genre']+' '+df_features['Movie_Keywords']+' '+df_features['Movie_Tagline']+' '+df_features['Movie_Cast']+' '+df_features['Movie_Director']

x

x.shape

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf=TfidfVectorizer()

x=tfidf.fit_transform(x)

x.shape

print(x)

from sklearn.metrics.pairwise import cosine_similarity

Similarity_Score=cosine_similarity(x)

Similarity_Score

Similarity_Score.shape

Favourite_Movie_Name=input('Enter your favourite movie name:')

All_Movies_Title_List=df['Movie_Title'].tolist()

import difflib

Movie_Recommendation=difflib.get_close_matches(Favourite_Movie_Name,All_Movies_Title_List)
print(Movie_Recommendation)

Close_Match=Movie_Recommendation[0]
print(Close_Match)

Index_of_Close_Match_Movie=df[df.Movie_Title==Close_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Movie)

Recommendation_Score=list(enumerate(Similarity_Score[Index_of_Close_Match_Movie]))
print(Recommendation_Score)

len(Recommendation_Score)

Sorted_Similar_Movies=sorted(Recommendation_Score,key=lambda x:x[1],reverse=True)
print(Sorted_Similar_Movies)

print('Top 30 Movies suggested for you:\n')
i=1
for movie in Sorted_Similar_Movies:
  index=movie[0]
  title_from_index=df[df.index==index]['Movie_Title'].values[0]
  if(i<31):
    print(i,'.',title_from_index)
    i+=1

Movie_Name=input('Enter your favourite movie name:')
list_of_all_titles=df['Movie_Title'].tolist()
Find_Close_Match=difflib.get_close_matches(Movie_Name,list_of_all_titles)
Close_Match=Find_Close_Match[0]
Index_of_Movie=df[df.Movie_Title==Close_Match]['Movie_ID'].values[0]
Recommendation_Score=list(enumerate(Similarity_Score[Index_of_Movie]))
sorted_similar_movies=sorted(Recommendation_Score,key=lambda x:x[1],reverse=True)
print('Top 10 movies suggested for you:\n')
i=1
for movie in sorted_similar_movies:
  index=movie[0]
  title_from_index=df[df.Movie_ID==index]['Movie_Title'].values
  if(i<11):
    print(i,'.',title_from_index)
    i+=1

"""**Explanation**

Today, movie recommendation systems are widely used by the most popular streaming services, enabling a more personalized experience and increased user satisfaction across the platforms. Why do we need them? It’s estimated that the world cinema has released more than 500,000 movies — a number beyond one person’s control. With such an enormous number of motion pictures to choose from, developing and improving recommendation systems with ML was a crucial step to make this process easier and feasible.

Once again, ML proves to be a vital technological solution that makes our lives easier. And the more these systems evolve, the more advanced ML techniques we have at our disposal that generate the most accurate content for users and give them what they are looking for.
"""